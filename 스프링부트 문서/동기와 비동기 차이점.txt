동기와 비동기 차이점.txt

비동기 VS 동기 차이

구분					동기(Synchronous)		비동기(Asynchronous)
작업 처리 방식		하나의 작업이 끝나야			요청 후 기다리지 않고 다른 작업
				다음 작업 수행가능			수행 가능
응답 대기 여부		응답을 받을 때까지 기다림		응답을 기다리지 않고 다음 코드 실행
처리 속도			느릴 수 있음(순차진행)		빠를 수 있음(병렬진행)
예시				전화 통화(상대방이 말할 때	문자 메시지(메시지를 보내고 바로  
				까지 기다려야 함)			다른 일을 할 수 있음)
				
*비동기 방식이 유용한 경우
1.웹 서버에서 여러 요청을 동시에 처리할 때
2.네트워크나 파일 I/O가 많은 작업을 할 때
	파일 다운로드, DB 조회 등 오래 걸리는 작업을 동시에 실행 가능
3.UI가 멈추지 않도록 해야할 때			
	프론트엔드에서 비동기 요청을 사용하면 화면이 멈추지 않고 유저 경험이 좋아짐
	
*비동기 방식의 단점
1.코드가 복잡해질 수 있음
	함수가 많아지면 콜백 지옥 문제가 발생할 수 있음
2.디버깅이 어려움
	코드 실행 순서가 비순차적이므로 디버깅이 까다로워 짐

*웹 페이지 처리시 비동기 처리가 적절한 경우	
1.사용자의 인터렉션을 막지 않아야 하는 경우(UX 개선)
사용자가 버튼을 클릭하거나 입력을 할 때, 서버 응답을 기다리느라
화면이 멈추면 안될 경우
예시
-검색 자동완성 기능
-파일 업로드 진행 중에도 다른 작업 가능 처리
-비동기 화면 처리(화면에 새로고침 없이 UI 변경이 필요한 페이지)

2.페이지 전체 새로고침 없이 데이터 갱신이 필요한 경우
일부 데이터만 변경해야할 때, 전체 페이지를 새로고침하지 않고 
비동기 요청으로 변경 가능
예시
-댓글 등록/삭제
-좋아요 버튼
-실시간 알림

3.실시간 데이터 처리가 필요한 경우
실시간으로 변하는 데이터를 반영해야 할 때 비동기 방식 필요
예시
-채팅
-실시간 주식 차트, 날짜 정보
-온라인 게임 상태 업데이트

*비동기로 처리하면 안 좋은 경우
데이터 일관성이 중요한 경우
회원가입, 결제 요청 등 트랜잭션이 필요한 작업은 동기 방식으로 구현해야
안정적이다, 서버 응답이 반드시 성공해야 하는 경우
예시
-회원가입 후 성공 페이지 이동
-결제 완료 후 확인 페이지 이동

**결론: 둘 다 적절히 사용해야 한다








